import time

"""
hash，翻译为散列。
作用：把任意长度的输入值通过“散列算法”变成固定长度的输出。该输出就是三劣质

hash其实就是一种压缩技术，他可以吧成百上千GB，TB的内容也压缩成一个固定长度的字符串。
但是：：压缩后的内容不能直接使用，还需要解密才可以正常使用

另外需要注意：
    不同的输入可能会散列成相同的输出，所以我们不可能从散列值来确定输入值
    
    例如：                         
    输入值：                        hash压缩后的输出值
    大家覅都费劲奥德赛f  -------->   123456789
    fjandadksfjoaiuadj  -------->   123456789
    
    两个输入值虽然不同，但是输出的值确相同
    这个现象被称为：hash碰撞
    
    后面学习中为了避免这种情况，会进一步进行操作，比如再次加密之类的
"""
a = 'python is so powerful'
b = hash(a)
print(b)
"""return: 43653718806081298"""
"""注意，在程序运行过程中，不管你多少次调用b，返回的hash值都是相同的，
但是！！ 如果你退出程序，重新进入，再次调用b时，返回的hash值就和现在这个值不同了！一定注意这一点"""

"""
这种程序中断导致的hash返回值并不是我们想要的
我们在项目中想要的是不管我多少次重复启动，得到的都应该是相同的hash值，这才是真正的“加密算法”


为了解决这个问题，我们引入了 MD5 算法
MD5：message-Digest Algorithm

MD5 可以产生一个128位的hash value，且是唯一值（极小可能发生碰撞），用于确保信息传输完整一致。
MD5前身是MD2，MD3，MD4

MD5特点：
    1. 压缩性好：任意长度压缩出来都是固定长度
    2. 容易修改：对输入值中任何字符修改都可以得到新的hash value
    3. 容易计算：从原数据计算出MD5很容易
    4. 强抗碰撞：已知原数据和MD5，相反推出一个具有相同MD5值得数据是非常困难的（即，伪造数据很难）
                原因：在压缩加密过程中，原文的部分信息被主动丢失了，所以很难反推



"""