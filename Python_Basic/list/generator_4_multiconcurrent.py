import time
"""
通过生成器进行单线程下的并发

故事是这样的：
三个消费者一个生产者
生产者生产包子给三个消费者吃
"""
def consumer(name):
    print('消费者%s准备吃包子啦~~'% name )
    while True:
        baozi = yield
        print('消费者%s接收到包子编号%s'%(name,baozi))
"""注意: 此时并没有调用consumer函数，虽然用consumer()，但其实是赋值给了一个变量
只有这个变量后面加小括号或者指令，才是真正调用这个函数"""
c1 = consumer('consumer_1')
c2 = consumer('consumer_2')
c3 = consumer('consumer_3')
"""注意: 不要忘记给生成器的第一个值必须是是空值"""
c1.__next__()
c2.__next__()
c3.__next__()


for i in range(10):
    print('-----------------生产出了第%s批包子------------------'% i)
    c1.send(i)
    c2.send(i)
    c3.send(i)

"""
return:

    消费者consumer_1准备吃包子啦~~
    消费者consumer_2准备吃包子啦~~
    消费者consumer_3准备吃包子啦~~
    -----------------生产出了第0批包子------------------
    消费者consumer_1接收到包子编号0
    消费者consumer_2接收到包子编号0
    消费者consumer_3接收到包子编号0
    -----------------生产出了第1批包子------------------
    消费者consumer_1接收到包子编号1
    消费者consumer_2接收到包子编号1
    消费者consumer_3接收到包子编号1
    -----------------生产出了第2批包子------------------
    消费者consumer_1接收到包子编号2
    消费者consumer_2接收到包子编号2
    消费者consumer_3接收到包子编号2
    -----------------生产出了第3批包子------------------
    消费者consumer_1接收到包子编号3
    消费者consumer_2接收到包子编号3
    消费者consumer_3接收到包子编号3
    -----------------生产出了第4批包子------------------
    消费者consumer_1接收到包子编号4
    消费者consumer_2接收到包子编号4
    消费者consumer_3接收到包子编号4
    -----------------生产出了第5批包子------------------
    消费者consumer_1接收到包子编号5
    消费者consumer_2接收到包子编号5
    消费者consumer_3接收到包子编号5
    -----------------生产出了第6批包子------------------
    消费者consumer_1接收到包子编号6
    消费者consumer_2接收到包子编号6
    消费者consumer_3接收到包子编号6
    -----------------生产出了第7批包子------------------
    消费者consumer_1接收到包子编号7
    消费者consumer_2接收到包子编号7
    消费者consumer_3接收到包子编号7
    -----------------生产出了第8批包子------------------
    消费者consumer_1接收到包子编号8
    消费者consumer_2接收到包子编号8
    消费者consumer_3接收到包子编号8
    -----------------生产出了第9批包子------------------
    消费者consumer_1接收到包子编号9
    消费者consumer_2接收到包子编号9
    消费者consumer_3接收到包子编号9
"""
